{"ast":null,"code":"var express = require(\"express\");\nvar sql = require(\"mssql/msnodesqlv8\");\nvar cors = require(\"cors\");\nvar app = express();\nvar port = 5000;\nvar config = {\n  server: \"DESKTOP-88C9AAR\\\\SQLEXPRESS\",\n  database: \"Database_Project\",\n  options: {\n    trustedConnection: true\n  },\n  driver: \"msnodesqlv8\"\n};\nvar pool = new sql.ConnectionPool(config);\napp.get(\"/\", function (req, res) {\n  res.send(\"Welcome to the server!\");\n});\napp.use(express.json());\napp.use(cors());\napp.post(\"/api/signup\", function (req, res) {\n  var _req$body = req.body,\n    firstName = _req$body.firstName,\n    lastName = _req$body.lastName,\n    email = _req$body.email,\n    password = _req$body.password,\n    confirmPassword = _req$body.confirmPassword;\n  if (!firstName || !lastName || !email || !password || !confirmPassword) {\n    return res.status(400).json({\n      error: \"Please fill in all the required fields\"\n    });\n  }\n  if (password !== confirmPassword) {\n    return res.status(400).json({\n      error: \"Password does not match\"\n    });\n  }\n  pool.connect(function (err, connection) {\n    if (err) {\n      console.error(\"Error connecting to the database:\", err.message);\n      return res.status(500).json({\n        error: \"Internal server error\"\n      });\n    }\n    var query = \"\\n      INSERT INTO Users (FirstName, LastName, Email, Password)\\n      VALUES (@firstName, @lastName, @email, @password);\\n    \";\n    var request = new sql.Request(connection);\n    request.input(\"FirstName\", sql.VarChar, firstName);\n    request.input(\"LastName\", sql.VarChar, lastName);\n    request.input(\"Email\", sql.VarChar, email);\n    request.input(\"Password\", sql.VarChar, password);\n    request.query(query, function (err) {\n      connection.close();\n      if (err) {\n        console.error(\"Error saving user:\", err.message);\n        return res.status(500).json({\n          error: \"Internal server error\"\n        });\n      }\n      console.log(\"User registered successfully\");\n      return res.status(200).json({\n        message: \"User registered successfully\"\n      });\n    });\n  });\n});\napp.post(\"/api/login\", function (req, res) {\n  var _req$body2 = req.body,\n    email = _req$body2.email,\n    password = _req$body2.password;\n  if (!email || !password) {\n    return res.status(400).json({\n      error: \"Please fill in all the required fields\"\n    });\n  }\n  pool.connect(function (err, connection) {\n    if (err) {\n      console.error(\"Error connecting to the database:\", err.message);\n      return res.status(500).json({\n        error: \"Internal server error\"\n      });\n    }\n    var query = \"\\n      SELECT * FROM Users\\n      WHERE Email = @email\\n        AND Password = @password;\\n    \";\n    var request = new sql.Request(connection);\n    request.input(\"Email\", sql.VarChar, email);\n    request.input(\"Password\", sql.VarChar, password);\n    request.query(query, function (err, result) {\n      connection.close();\n      if (err) {\n        console.error(\"Error fetching user:\", err.message);\n        return res.status(500).json({\n          error: \"Internal server error\"\n        });\n      }\n      if (result.recordset.length === 0) {\n        return res.status(401).json({\n          error: \"Invalid email or password\"\n        });\n      }\n      console.log(\"User logged in successfully\");\n      return res.status(200).json({\n        message: \"User logged in successfully\"\n      });\n    });\n  });\n});\napp.get(\"/api/products\", function (req, res) {\n  pool.connect(function (err, connection) {\n    if (err) {\n      console.error(\"Error connecting to the database:\", err.message);\n      return res.status(500).json({\n        error: \"Internal server error\"\n      });\n    }\n    var query = \"SELECT * FROM Product;\";\n    var request = new sql.Request(connection);\n    request.query(query, function (err, result) {\n      connection.close();\n      if (err) {\n        console.error(\"Error fetching products:\", err.message);\n        return res.status(500).json({\n          error: \"Internal server error\"\n        });\n      }\n      return res.status(200).json(result.recordset);\n    });\n  });\n});\napp.listen(port, function () {\n  console.log(\"Server is running on port \" + port);\n});","map":{"version":3,"names":["express","require","sql","cors","app","port","config","server","database","options","trustedConnection","driver","pool","ConnectionPool","get","req","res","send","use","json","post","_req$body","body","firstName","lastName","email","password","confirmPassword","status","error","connect","err","connection","console","message","query","request","Request","input","VarChar","close","log","_req$body2","result","recordset","length","listen"],"sources":["C:/Users/Hassa/OneDrive - Higher Education Commission/mob-app/React Native/react_app/components/Server.js"],"sourcesContent":["const express = require(\"express\");\r\nconst sql = require(\"mssql/msnodesqlv8\");\r\nconst cors = require(\"cors\");\r\nconst app = express();\r\nconst port = 5000;\r\n\r\n// Configure the database connection\r\nconst config = {\r\n  server: \"DESKTOP-88C9AAR\\\\SQLEXPRESS\",\r\n  database: \"Database_Project\",\r\n  options: {\r\n    trustedConnection: true,\r\n  },\r\n  driver: \"msnodesqlv8\",\r\n};\r\n\r\n// Create a pool of connections\r\nconst pool = new sql.ConnectionPool(config);\r\n\r\napp.get(\"/\", (req, res) => {\r\n  res.send(\"Welcome to the server!\");\r\n});\r\n\r\n// Middleware to parse JSON bodies\r\napp.use(express.json());\r\napp.use(cors());\r\n\r\n// Route to handle user registration\r\napp.post(\"/api/signup\", (req, res) => {\r\n  const { firstName, lastName, email, password, confirmPassword } = req.body;\r\n\r\n  // Perform validation checks\r\n  if (!firstName || !lastName || !email || !password || !confirmPassword) {\r\n    return res\r\n      .status(400)\r\n      .json({ error: \"Please fill in all the required fields\" });\r\n  }\r\n\r\n  if (password !== confirmPassword) {\r\n    return res.status(400).json({ error: \"Password does not match\" });\r\n  }\r\n\r\n  // Create a new connection from the pool\r\n  pool.connect((err, connection) => {\r\n    if (err) {\r\n      console.error(\"Error connecting to the database:\", err.message);\r\n      return res.status(500).json({ error: \"Internal server error\" });\r\n    }\r\n\r\n    // Save user's information to the database\r\n    const query = `\r\n      INSERT INTO Users (FirstName, LastName, Email, Password)\r\n      VALUES (@firstName, @lastName, @email, @password);\r\n    `;\r\n\r\n    const request = new sql.Request(connection);\r\n    request.input(\"FirstName\", sql.VarChar, firstName);\r\n    request.input(\"LastName\", sql.VarChar, lastName);\r\n    request.input(\"Email\", sql.VarChar, email);\r\n    request.input(\"Password\", sql.VarChar, password);\r\n\r\n    request.query(query, (err) => {\r\n      connection.close(); // Close the connection\r\n\r\n      if (err) {\r\n        console.error(\"Error saving user:\", err.message);\r\n        return res.status(500).json({ error: \"Internal server error\" });\r\n      }\r\n\r\n      console.log(\"User registered successfully\");\r\n      return res.status(200).json({ message: \"User registered successfully\" });\r\n    });\r\n  });\r\n});\r\n\r\n// ...\r\n\r\n// ...\r\n\r\n// Route to handle user login\r\napp.post(\"/api/login\", (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  // Perform validation checks\r\n  if (!email || !password) {\r\n    return res\r\n      .status(400)\r\n      .json({ error: \"Please fill in all the required fields\" });\r\n  }\r\n\r\n  // Create a new connection from the pool\r\n  pool.connect((err, connection) => {\r\n    if (err) {\r\n      console.error(\"Error connecting to the database:\", err.message);\r\n      return res.status(500).json({ error: \"Internal server error\" });\r\n    }\r\n\r\n    // Check if the user exists and the password is correct\r\n    const query = `\r\n      SELECT * FROM Users\r\n      WHERE Email = @email\r\n        AND Password = @password;\r\n    `;\r\n\r\n    const request = new sql.Request(connection);\r\n    request.input(\"Email\", sql.VarChar, email);\r\n    request.input(\"Password\", sql.VarChar, password);\r\n\r\n    request.query(query, (err, result) => {\r\n      connection.close(); // Close the connection\r\n\r\n      if (err) {\r\n        console.error(\"Error fetching user:\", err.message);\r\n        return res.status(500).json({ error: \"Internal server error\" });\r\n      }\r\n\r\n      if (result.recordset.length === 0) {\r\n        return res.status(401).json({ error: \"Invalid email or password\" });\r\n      }\r\n\r\n      console.log(\"User logged in successfully\");\r\n      return res.status(200).json({ message: \"User logged in successfully\" });\r\n    });\r\n  });\r\n});\r\n\r\n// Route to fetch all products\r\napp.get(\"/api/products\", (req, res) => {\r\n  pool.connect((err, connection) => {\r\n    if (err) {\r\n      console.error(\"Error connecting to the database:\", err.message);\r\n      return res.status(500).json({ error: \"Internal server error\" });\r\n    }\r\n\r\n    const query = \"SELECT * FROM Product;\";\r\n\r\n    const request = new sql.Request(connection);\r\n\r\n    request.query(query, (err, result) => {\r\n      connection.close();\r\n\r\n      if (err) {\r\n        console.error(\"Error fetching products:\", err.message);\r\n        return res.status(500).json({ error: \"Internal server error\" });\r\n      }\r\n\r\n      return res.status(200).json(result.recordset);\r\n    });\r\n  });\r\n});\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n  console.log(`Server is running on port ${port}`);\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}