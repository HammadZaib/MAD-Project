{"ast":null,"code":"var express = require('express');\nvar mysql = require('mysql');\nvar Connection = require('tedious').Connection;\nvar Request = require('tedious').Request;\nvar app = express();\nvar port = 5000;\nvar pool = mysql.createPool({\n  connectionLimit: 10,\n  server: 'DESKTOP-88C9AAR\\SQLEXPRESS',\n  options: {\n    database: 'Database_Project',\n    trustedConnection: true,\n    enableArithAbort: true\n  },\n  acquireTimeout: 30000\n});\npool.getConnection(function (err, connection) {\n  if (err) {\n    console.error('Error connecting to the database:', err);\n  } else {\n    console.log('Connected to the database');\n    connection.release();\n  }\n});\napp.use(express.json());\napp.post('/api/signup', function (req, res) {\n  var _req$body = req.body,\n    firstName = _req$body.firstName,\n    lastName = _req$body.lastName,\n    email = _req$body.email,\n    password = _req$body.password;\n  if (!firstName || !lastName || !email || !password) {\n    return res.status(400).json({\n      error: 'Please fill in all the required fields'\n    });\n  }\n  var query = 'INSERT INTO users (first_name, last_name, email, password) VALUES (?, ?, ?, ?)';\n  var values = [firstName, lastName, email, password];\n  pool.query(query, values, function (err, result) {\n    if (err) {\n      console.error('Error saving user:', err);\n      return res.status(500).json({\n        error: 'Internal server error'\n      });\n    }\n    console.log('User registered successfully');\n    return res.status(200).json({\n      message: 'User registered successfully'\n    });\n  });\n});\napp.listen(port, function () {\n  console.log(\"Server running on port \" + port);\n});","map":{"version":3,"names":["express","require","mysql","Connection","Request","app","port","pool","createPool","connectionLimit","server","options","database","trustedConnection","enableArithAbort","acquireTimeout","getConnection","err","connection","console","error","log","release","use","json","post","req","res","_req$body","body","firstName","lastName","email","password","status","query","values","result","message","listen"],"sources":["C:/Users/Hassa/OneDrive - Higher Education Commission/mob-app/React Native/react_app/components/Server.js"],"sourcesContent":["// server.js\r\n\r\nconst express = require('express');\r\nconst mysql = require('mysql');\r\nconst Connection = require('tedious').Connection;\r\nconst Request = require('tedious').Request;\r\n\r\nconst app = express();\r\nconst port = 5000;\r\n\r\n// Create a MySQL connection pool\r\nconst pool = mysql.createPool({\r\n  // Change the following configuration as per your setup\r\n  connectionLimit: 10,\r\n  server: 'DESKTOP-88C9AAR\\SQLEXPRESS',\r\n  options: {\r\n    // Change the following configuration as per your setup\r\n    database: 'Database_Project',\r\n    trustedConnection: true,\r\n    enableArithAbort: true,\r\n  },\r\n  acquireTimeout: 30000,\r\n});\r\n\r\n// Test the database connection\r\npool.getConnection((err, connection) => {\r\n  if (err) {\r\n    console.error('Error connecting to the database:', err);\r\n  } else {\r\n    console.log('Connected to the database');\r\n    connection.release();\r\n  }\r\n});\r\n\r\n// Parse JSON bodies\r\napp.use(express.json());\r\n\r\n// Route to handle user registration\r\napp.post('/api/signup', (req, res) => {\r\n  const { firstName, lastName, email, password } = req.body;\r\n\r\n  // Perform validation checks\r\n  if (!firstName || !lastName || !email || !password) {\r\n    return res.status(400).json({ error: 'Please fill in all the required fields' });\r\n  }\r\n\r\n  // Save user's information to the database\r\n  const query = 'INSERT INTO users (first_name, last_name, email, password) VALUES (?, ?, ?, ?)';\r\n  const values = [firstName, lastName, email, password];\r\n\r\n  pool.query(query, values, (err, result) => {\r\n    if (err) {\r\n      console.error('Error saving user:', err);\r\n      return res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n\r\n    console.log('User registered successfully');\r\n    return res.status(200).json({ message: 'User registered successfully' });\r\n  });\r\n});\r\n\r\napp.listen(port, () => {\r\n  console.log(`Server running on port ${port}`);\r\n});\r\n"],"mappings":"AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,IAAMC,KAAK,GAAGD,OAAO,CAAC,OAAO,CAAC;AAC9B,IAAME,UAAU,GAAGF,OAAO,CAAC,SAAS,CAAC,CAACE,UAAU;AAChD,IAAMC,OAAO,GAAGH,OAAO,CAAC,SAAS,CAAC,CAACG,OAAO;AAE1C,IAAMC,GAAG,GAAGL,OAAO,CAAC,CAAC;AACrB,IAAMM,IAAI,GAAG,IAAI;AAGjB,IAAMC,IAAI,GAAGL,KAAK,CAACM,UAAU,CAAC;EAE5BC,eAAe,EAAE,EAAE;EACnBC,MAAM,EAAE,4BAA4B;EACpCC,OAAO,EAAE;IAEPC,QAAQ,EAAE,kBAAkB;IAC5BC,iBAAiB,EAAE,IAAI;IACvBC,gBAAgB,EAAE;EACpB,CAAC;EACDC,cAAc,EAAE;AAClB,CAAC,CAAC;AAGFR,IAAI,CAACS,aAAa,CAAC,UAACC,GAAG,EAAEC,UAAU,EAAK;EACtC,IAAID,GAAG,EAAE;IACPE,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAEH,GAAG,CAAC;EACzD,CAAC,MAAM;IACLE,OAAO,CAACE,GAAG,CAAC,2BAA2B,CAAC;IACxCH,UAAU,CAACI,OAAO,CAAC,CAAC;EACtB;AACF,CAAC,CAAC;AAGFjB,GAAG,CAACkB,GAAG,CAACvB,OAAO,CAACwB,IAAI,CAAC,CAAC,CAAC;AAGvBnB,GAAG,CAACoB,IAAI,CAAC,aAAa,EAAE,UAACC,GAAG,EAAEC,GAAG,EAAK;EACpC,IAAAC,SAAA,GAAiDF,GAAG,CAACG,IAAI;IAAjDC,SAAS,GAAAF,SAAA,CAATE,SAAS;IAAEC,QAAQ,GAAAH,SAAA,CAARG,QAAQ;IAAEC,KAAK,GAAAJ,SAAA,CAALI,KAAK;IAAEC,QAAQ,GAAAL,SAAA,CAARK,QAAQ;EAG5C,IAAI,CAACH,SAAS,IAAI,CAACC,QAAQ,IAAI,CAACC,KAAK,IAAI,CAACC,QAAQ,EAAE;IAClD,OAAON,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACV,IAAI,CAAC;MAAEJ,KAAK,EAAE;IAAyC,CAAC,CAAC;EAClF;EAGA,IAAMe,KAAK,GAAG,gFAAgF;EAC9F,IAAMC,MAAM,GAAG,CAACN,SAAS,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,CAAC;EAErD1B,IAAI,CAAC4B,KAAK,CAACA,KAAK,EAAEC,MAAM,EAAE,UAACnB,GAAG,EAAEoB,MAAM,EAAK;IACzC,IAAIpB,GAAG,EAAE;MACPE,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEH,GAAG,CAAC;MACxC,OAAOU,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACV,IAAI,CAAC;QAAEJ,KAAK,EAAE;MAAwB,CAAC,CAAC;IACjE;IAEAD,OAAO,CAACE,GAAG,CAAC,8BAA8B,CAAC;IAC3C,OAAOM,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACV,IAAI,CAAC;MAAEc,OAAO,EAAE;IAA+B,CAAC,CAAC;EAC1E,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFjC,GAAG,CAACkC,MAAM,CAACjC,IAAI,EAAE,YAAM;EACrBa,OAAO,CAACE,GAAG,6BAA2Bf,IAAM,CAAC;AAC/C,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}